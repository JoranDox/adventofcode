
testinput = [
    [1,2],
    [[1,2],3],
    [9,[8,7]],
    [[1,9],[8,5]],
    [[[[1,2],[3,4]],[[5,6],[7,8]]],9],
    [[[9,[3,8]],[[0,9],6]],[[[3,7],[4,9]],3]],
    [[[[1,3],[5,3]],[[1,3],[8,7]]],[[[4,9],[6,9]],[[8,2],[7,3]]]],
]

# with open("day18inputtest.txt") as f:
with open("day18input.txt") as f:
    data = [d.strip() for d in f.readlines()]



def sfadd(a,b):
    return f"[{a},{b}]"

def sfsplit(a: int):
    return a//2, (a+1)//2

# def sfexplode(a):

# def sfreduce(n, path = None):
#     if path is None:
#         path = ()
#     if type(n) == int:
#         return n
#     elif type(n) == list:
#         if len(path) ==


def sfreduce(inlist):
    opens = 0
    for i, char in enumerate(inlist):
        if char == "[":
            opens += 1
        elif char == "]":
            opens -= 1
        elif char == ",":
            pass
        else:
            # char should be a number
            char = int(char)
            if opens > 4:
                # print("explode")
                assert inlist[i+1] == ","
                char2 = int(inlist[i+2])
                for j in range(i-1,0,-1):
                    try:
                        c = int(inlist[j])
                        inlist[j] = c + char
                        break
                    except:
                        pass
                for j in range(i+3,len(inlist)):
                    try:
                        c = int(inlist[j])
                        inlist[j] = c + char2
                        break
                    except:
                        pass

                return [*inlist[:i-1], 0, *inlist[i+4:]]
    # print("no explode")
    for i, char in enumerate(inlist):
        if char == "[":
            opens += 1
        elif char == "]":
            opens -= 1
        elif char == ",":
            pass
        else:
            char = int(char)
            if char > 9:
                # print("split")
                a,b = sfsplit(int(char))
                return [*inlist[:i], "[", a, ",", b, "]", *inlist[i+1:]]
    # print("nothing")
    return inlist


def sfsum(a,b):
    return ["[", *a, ",", *b, "]"]

def tostr(inlist):
    return "".join(str(s) for s in inlist)

def keepreducing(inlist):
    s = tostr(inlist)
    s2 = None
    while s != s2:
        # print(s)
        s2 = s
        inlist = sfreduce(inlist)
        s = tostr(inlist)
    return inlist

# instring = "[[[[[9,8],1],2],3],4]"
# instring = "[7,[6,[5,[4,[3,2]]]]]"
# instring = [11]
# inlist = [s for s in instring]

inlista = list("[[[[4,3],4],4],[7,[[8,4],9]]]")
inlistb = list("[1,1]")


print(tostr(inlista), tostr(inlistb))
inlist = sfsum(inlista,inlistb)
print(tostr(inlist))
reduced = keepreducing(inlist)

def submag(n):
    # print("entered submag with", n)
    try:
        ret = int(n)
        # print("sreturning", ret)
        return ret
    except:
        pass
    a,b = n
    ret = 3*submag(a) + 2*submag(b)
    # print("areturning", ret)
    return ret


def getmagnitude(inlist):
    from ast import literal_eval
    elist = literal_eval(tostr(inlist))
    return submag(elist)

# reduced = list("[[9,1],[1,9]]")
# print(getmagnitude(reduced))
# print(''.join(str(s) for s in reduced))

sumnumbers = [list(a) for a in [
    "[[[[4,6],4],[1,7]],[[[1,6],[8,4]],[1,1]]]",
    "[[[[8,5],[9,2]],1],[[2,5],[[9,4],[5,9]]]]",
    "[[[[7,3],0],[8,9]],6]",
    "[[6,[[7,2],[6,2]]],[[[9,8],9],[9,6]]]",
    "[2,[[[9,2],6],[[5,3],[6,7]]]]",
    "[[[5,[9,6]],0],[[[2,8],[7,0]],[7,[4,4]]]]",
    "[[[[5,0],2],[0,1]],4]",
    "[2,[8,8]]",
    "[[[[2,5],[6,8]],[[9,8],4]],[[[2,3],[5,8]],[9,5]]]",
    "[[[[0,7],[9,4]],[[1,0],9]],[[[8,8],[7,2]],[3,[6,5]]]]",
    "[[[[3,2],8],1],[[4,[3,4]],[[6,5],[0,6]]]]",
    "[[[7,8],8],[0,[5,2]]]",
    "[[3,[3,3]],[[[6,9],[1,1]],[6,[2,9]]]]",
    "[[[[9,7],[6,8]],4],[[[8,2],[2,9]],[8,[6,2]]]]",
    "[[[[7,3],2],[9,6]],[[[1,7],[0,0]],[4,9]]]",
    "[[8,[7,[1,0]]],7]",
    "[[[7,[5,1]],0],[[8,[5,3]],4]]",
    "[1,[[[2,6],2],[1,[6,0]]]]",
    "[[[5,8],[[9,1],1]],[[3,[5,0]],5]]",
    "[[[[1,5],[4,9]],8],[[7,0],6]]",
    "[9,[[0,[1,0]],6]]",
    "[[[[6,8],6],9],[[7,3],2]]",
    "[[9,[[8,7],4]],[[[4,0],[9,0]],[8,1]]]",
    "[[[2,[4,4]],[7,[0,1]]],[8,[[8,6],[4,0]]]]",
    "[0,9]",
    "[[[[1,8],[7,4]],[[5,0],[6,1]]],[5,7]]",
    "[[[[8,2],[9,2]],[8,[8,4]]],[0,4]]",
    "[[[[0,7],[5,8]],3],6]",
    "[[[7,[3,4]],[3,[1,5]]],2]",
    "[[[1,[4,2]],5],[[1,2],1]]",
    "[[[[8,2],[0,9]],1],[[[9,0],[3,5]],[8,[8,0]]]]",
    "[[[0,5],[1,[3,3]]],[[[1,0],[5,2]],[7,5]]]",
    "[[[4,[7,3]],[0,9]],[[2,0],8]]",
    "[[[[2,2],8],[7,1]],5]",
    "[[1,[[3,8],7]],[[7,[5,8]],[4,[1,7]]]]",
    "[[[[2,7],4],[8,[9,1]]],[[5,2],[4,3]]]",
    "[[2,[7,2]],[[8,[0,8]],[0,[4,2]]]]",
    "[[6,[6,[7,4]]],[[7,[2,0]],[[8,2],8]]]",
    "[[[7,[1,7]],[[4,1],4]],[1,[4,6]]]",
    "[1,[[1,0],[[0,3],[6,9]]]]",
    "[[[[8,6],0],[[2,8],[3,0]]],[[[8,2],7],[[3,0],5]]]",
    "[[[[2,8],4],[2,[0,7]]],[[3,[1,2]],[[8,0],[4,2]]]]",
    "[1,8]",
    "[[5,6],6]",
    "[[[[1,0],[3,6]],[[4,0],1]],[0,7]]",
    "[[[5,[9,6]],[7,[1,2]]],2]",
    "[[[6,4],[[5,6],[1,8]]],[[[9,0],[7,7]],[[5,8],[6,8]]]]",
    "[8,5]",
    "[5,[[[6,8],8],0]]",
    "[[[[5,7],[0,0]],[6,[0,0]]],[[[5,5],3],[[1,1],[3,4]]]]",
    "[[[4,0],[[8,6],2]],[[3,[3,1]],[[2,8],[7,2]]]]",
    "[[[8,7],[[5,5],[5,3]]],4]",
    "[[[[5,4],1],[3,4]],[3,5]]",
    "[[[6,5],[[6,3],6]],4]",
    "[[[[2,2],[7,1]],[6,6]],[[8,[8,7]],[[1,6],[3,0]]]]",
    "[[4,[[5,0],[7,4]]],[3,1]]",
    "[[[3,[5,8]],5],[1,[[9,6],3]]]",
    "[[0,[[3,0],[8,7]]],[[1,3],3]]",
    "[5,[[3,[3,3]],[3,6]]]",
    "[[[[7,3],8],3],[2,[[9,8],2]]]",
    "[[[2,4],[[1,2],5]],[[[1,2],[6,0]],3]]",
    "[[9,[[1,1],[1,7]]],[1,[2,[9,1]]]]",
    "[[[5,[0,0]],5],[6,[0,1]]]",
    "[[3,[[6,5],7]],[[7,8],3]]",
    "[[5,[2,6]],8]",
    "[[6,[0,[3,0]]],[1,2]]",
    "[3,[[[3,7],2],[[4,0],6]]]",
    "[[[8,[2,7]],[4,1]],[[2,[4,2]],3]]",
    "[[3,2],[[[8,8],[8,6]],[[5,3],1]]]",
    "[1,[2,[[3,2],[2,9]]]]",
    "[8,[[9,1],[[8,4],[9,9]]]]",
    "[[[4,[4,6]],[1,8]],[[7,7],[[7,4],3]]]",
    "[[[8,2],[[9,7],[0,8]]],[[4,4],[[6,1],5]]]",
    "[[[3,[6,6]],[[8,6],[3,7]]],[[7,9],[[5,3],8]]]",
    "[[[8,9],[8,6]],[[[3,3],[2,9]],[[6,6],9]]]",
    "[8,[[[3,0],5],2]]",
    "[[[[1,3],1],[[1,9],4]],[7,[3,1]]]",
    "[[[[9,3],3],[[6,8],7]],[[[2,0],3],[8,[3,6]]]]",
    "[[[[7,1],[8,1]],[[4,6],[5,9]]],[[[4,5],3],5]]",
    "[6,[[3,[0,0]],[6,6]]]",
    "[[[[8,8],[7,6]],3],[[[7,7],[1,1]],[[1,8],[1,4]]]]",
    "[[9,[8,[3,4]]],[[6,2],[1,5]]]",
    "[[5,[3,3]],[5,[0,5]]]",
    "[[[[8,9],5],[1,9]],[[5,[2,8]],[[6,4],[9,4]]]]",
    "[2,6]",
    "[[[[1,4],8],5],[5,[0,[1,7]]]]",
    "[[[[1,0],[9,9]],[0,9]],[[[5,4],[1,6]],[9,[6,7]]]]",
    "[[[7,1],5],[[3,2],5]]",
    "[[9,[[8,8],[7,0]]],[5,[3,[1,3]]]]",
    "[[[[5,2],[7,5]],[4,[6,7]]],[[[8,1],6],[2,[6,6]]]]",
    "[[[5,7],[6,[8,2]]],[8,2]]",
    "[[[[5,7],8],[[9,8],2]],[[2,8],[[7,6],3]]]",
    "[[1,[[1,6],1]],[0,[[5,9],[9,1]]]]",
    "[[[[1,4],[5,0]],[[5,5],[9,3]]],[[6,4],[4,[4,6]]]]",
    "[7,[[5,[4,8]],[[5,9],2]]]",
    "[[[[2,9],[1,8]],[4,2]],0]",
    "[[5,[[0,9],[3,7]]],[2,[6,[4,8]]]]",
    "[[0,[5,5]],0]",
    "[[[5,0],[[0,5],8]],[6,[[8,7],[6,5]]]]",
    "[[[5,[8,2]],[8,4]],[[6,2],[8,[7,0]]]]",
]]
# while len(sumnumbers) > 1:
#     sumnumbers = [
#         keepreducing(sfsum(sumnumbers[0], sumnumbers[1])),
#         *sumnumbers[2:]
#     ]
# final = sumnumbers[0]
# print(tostr(final), getmagnitude(final))
maxmag = 0
for i in sumnumbers:
    for j in sumnumbers:
        if i != j:
            maxmag = max(maxmag,getmagnitude(keepreducing(sfsum(i,j))))
print(maxmag)